<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Index</title>
</head>
<body>
	<h3>1.Servlet</h3>
	<b>1.1访问Servlet的方式有三种。</b><br>
	1.1.1直接在浏览器输入访问路径来访问。<br>
	<a href="firstServ"> 1.1.2通过超链接来访问Servlet(firstServlet)</a><br>
	1.1.3通过表单来访问Servlet<br>
	<form action="firstServ" method="post">
		输入帐号：<input type="text" name="loginname"><br>
		输入密码：<input type="text" name="password"><br>
		<input type="submit" value="提交"> 	
	</form><br>
	<a href="lifeServlet">1.2Servleta生命周期(观察控制台输出窗口)</a><br>
	<a href="getParam">1.3getInitParamServlet</a><br>
	<a href="Register.html">1.4注册</a><br>
	<a href="login.html">1.5转发和重定向</a><br>
	<h3>2.状态管理Cookie&Session</h3>
	<a href="input.html">2.1Cookie</a><br>
	<a href="sessionLogin.html">2.2Session</a><br>
	<h3>3.JSP</h3>
	<a href="JSP/FirstJsp.jsp">3.1JSP脚本元素(a.申明<%! %> b.脚本 <% %> c.表达式<%= %>)</a><br>
	3.2JSP指令元素<br>
	<a href="JSP/page/page.jsp">3.2.1page指令(import、language、contentType属性)</a><br>
	<a href="JSP/page/errorPage.jsp">3.2.2page指令(errorPage、isErrorPage属性,注意:需要使用google等浏览器查看运行 结果)</a><br>
	<a href="JSP/include/main.jsp">3.2.3include指令</a><br>
	<a href="#">3.2.4taglib指令</a><br>
	3.3JSP动作元素<br>
	<a href="JSP/actionParmaForward/forward.jsp">3.3.1&#60;jsp:param&#62;、&#60;jsp:forward&#62;</a><br>
	param动作元素:用于指定参数以及与其对应的值，可以使用request对象读取这些参数的值。<br>
	forward动作元素：用于实现请求的转发，转发的目标组件可以是jsp，servlet，html文件。<br>
	<a href="JSP/actionParmaForward/include.jsp">3.3.2&#60;jsp:include&#62;</a><br>
	3.4JSP内置对象<br>
	<a href="JSP/builtinObject/multitable.jsp">3.4.1内置对象out(JspWrite的对象)打印99乘法表</a><br>
	<a href="resparam.html">3.4.2内置对象request、response(HttpServletRequest/Response的对象)</a><br>
	<a href="JSP/builtinObject/curPage.jsp">3.4.3内置对象request、session、application(HttpServletRequest、HttpSession、ServletContex的对象)</a><br>
	<h3>4.JavaWeb中的路径问题</h3>
	<a href="JSP/path.jsp">4.1路径相关函数</a>
	<h3>5.过滤器</h3>
	<a href="JSP/filter0501/login.jsp">5.1过滤器</a>
	<h3>6.监听器</h3>
	监听器是一个实现了某一接口的普通类;<br>
	用于监听某一特定java对象<font color="red">(ServletContex,HttpSession,ServletRequest的对象)</font>的方法调用和属性改变<br>
	当被监听的对象发生方法调用或者属性修改时,监听器的某个方法将立即被执行而做出反应<br>
	a.ServletContex监听器接口：ServletContexListener、ServletContexAttributeListener<br>
	b.HttpSession监听器接口：HttpSessionListener、HttpSessionAttributeListener、HttpSessionBindingListener、HttpSessionActivationListener<br>
	c.ServletRequest监听器接口:ServletRequestListener、ServletRequestAttributeListener<br>
	<br>
	监听器开发步骤：(1)创建类实现相应的监听器接口并覆写其中的抽象方法。(2)web.xml中使用&#60;listener&#62;元素配置监听器<br>
	<a>6.1监听web应用的初始化和销毁</a><br>
	<a href="JSP/listener0502/countOnline.jsp">6.2统计系统在线人数功能</a><br>
	<a href="JSP/listener0502/user.jsp">6.3监听HttpSession对象的创建和销毁</a><br>
	<h3>7.JavaBean</h3>
	<a>7.1JavaBean的概念</a><br>
	一个java类，在编写jsp页面时，可以将相同的功能提取出来，组织成javabean，<br>
	当需要使用该功能时，只需要调用javabean中的相应方法即可，实现了代码复用。<br>
	java类要作为javabean来使用，必须遵循以下规范：<br>
	(1)必须是public类<br>
	(2)必须有无参构造方法<br>
	(3)属性必须是private|protected<br>
	(4)每个属性要定义get/set方法<br>
	<a href="book.html">7.2JavaBean的使用</a><br>
	<a>7.3JavaBean的4种作用范围</a><br>
	<a href="JSP/JavaBean/pageCount.jsp">(1)page作用范围</a><br>
	<a href="JSP/JavaBean/requestCount.jsp">(2)request作用范围</a><br>
	<a href="JSP/JavaBean/sessionCount.jsp">(3)session作用范围</a><br>
	<a href="JSP/JavaBean/applicationCount.jsp">(4)application作用范围</a><br>
	<h3>8.MVC设计模式</h3>
	<a href="JSP/mvc/login.jsp">8.1MVC</a>
	<h3>9.关于编码问题</h3>
	<a href="encode.html">9.1中文乱码问题</a>
	<h3>10.EL表达式</h3>
	<a>10.1EL访问数据</a><br>
	<a href="/scopeServlet">10.1.1EL访问作用域变量</a><br>
</body>
</html>
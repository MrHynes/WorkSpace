package pers.qiqcheng.spring.demo12;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;

@Aspect
public class MyAspect {
	//前置通知
	@Before("execution(* pers.qiqcheng.spring.demo12.UserDao.add(..))")
	public void before(){
		System.out.println("addbefore..");
	}
	//后置通知
	//@AfterReturning(value="execution(* pers.qiqcheng.spring.demo12.UserDao.update(..))",returning="returnval")
	//还可以改成
	@AfterReturning(value="MyAspect.myPointcutUpdate()",returning="returnval")
	public int afterReturn(Object returnval){
		System.out.println("afterReturning.."+returnval);
		return (int)returnval;
	}
	//环绕通知
	@Around("MyAspect.myPointcutDelete()")
	public void Around(ProceedingJoinPoint point){
		System.out.println("aroundBefore..");
		Object object=point.proceed();
		System.out.println("aroundAfter..");
	}
	//切点的注解
	@Pointcut("execution(* pers.qiqcheng.spring.demo12.UserDao.update(..))")
	private void myPointcutUpdate(){}
	@Pointcut("execution(* pers.qiqcheng.spring.demo12.UserDao.delete(..))")
	private void myPointcutDelete(){}
	@Pointcut("execution(* pers.qiqcheng.spring.demo12.UserDao.find(..))")
	private void myPointcutUFind(){}
	
}
